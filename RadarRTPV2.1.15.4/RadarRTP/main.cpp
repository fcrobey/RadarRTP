// main.cpp : This is the application entry point.
// This file contains the main/wWinMain procedures that start the application
// by Frank Robey
// Small portions of this were autogenerated by Visual Studio, but they have been so modified that
// they are no longer recognizable.
//
// Dec 2013-Jan 2014, Initial implementation.
// 
// Mar 2018	Moved GUI out of this file.  Added support for Linux. Switched to use of C++11 threads
/*
RadarRTP - Radar Real time Program (RTP)

© 2022 Massachusetts Institute of Technology.

Distributed under GNU GPLv2.

This program is free software; you can redistribute it and/or modify it under the terms of the GNU
General Public License, Version 2, as published by the Free Software Foundation.

This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even
the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

See the GNU General Public License for more details, supplied with this source as License.txt

*/

#include "stdafx.h"
#include "RadarRTP.h"
#include "radarConfig.h"
#include "ImageDisplay.h"

//#include "winOGL.h"
#include <thread>
//#include <wchar.h>
#include <atomic>
#ifndef _RTP_Headless
#ifdef _WINGUI
#include "winGUI.h"
#endif
#ifdef _FLTKGUI
#include "fltkgui.h"
#endif
#endif


#ifdef _WIN32
int APIENTRY wWinMain(_In_ HINSTANCE hInstance,
	_In_opt_ HINSTANCE hPrevInstance,
	_In_ LPWSTR    lpCmdLine,
	_In_ int       nCmdShow)
{
	UNREFERENCED_PARAMETER(hPrevInstance);
	UNREFERENCED_PARAMETER(lpCmdLine);
#else

int main()
{
#endif

	// Create a console window for diagnostic and error messages and send welcome.  Should show up behind the main window.
	remapstdConsole();  // Remap stdin, stdout, stderr to a console window that is created
	int testval = ReadConfiguration(); 	  // Read configuration information

	// Anything printed prior to this call may or may not be printed depending on compile option
	open_log_file(gRadarConfig.DataFileRoot.c_str());
	openDebugDataFile();
	debugPrint("This is a test %d\n",233);
	log_message( "Educational radar realtime program\n\t%s, version %s \n\tWritten by F. Robey, \n\t(c) 2022 Massachusetts Institute of Technology., (c) 1988 Frank Robey", 
		gRadarConfig.ProgramName.c_str(), gRadarConfig.Version.c_str());
	

	if (testval == 0) {
		log_message("Initialization file was read.");

	} 	else 
		log_message("Unable to read radarconfig.ini. Will use default values");
	log_message("Radar is now starting up!");

	DumpConfig();

#ifndef _RTP_Headless
#ifdef _WINGUI
	// Perform windows program/GUI initialization:
	if (!InitInstance(hInstance, nCmdShow, gRadarConfig.ProcWindowFName.c_str() ))
	{
		return FALSE;
	}
#endif
#endif
	log_message("Starting radar");
	start_radar();
	std::atomic<bool> ConsoleExitProgramFlag(FALSE);
	ConsoleExitProgramFlag = false; // gcc doesn't like the initialization on the same line
	std::thread consolethread = std::thread(ConsoleKeyMonitor, std::ref(ConsoleExitProgramFlag));

#ifndef _RTP_Headless
#ifdef _FLTKGUI
	log_message("Starting fltk GUI");
	std::thread fltkthread = std::thread(RunFLTKGui, std::ref(ConsoleExitProgramFlag));
#endif

#ifdef _WINGUI
	StartRadarDisp();

	HACCEL hAccelTable = LoadAccelerators(hInstance, MAKEINTRESOURCE(IDC_RADARRTP));

	MSG msg;

	// Main message loop (for windows win32):
	log_message("Starting win32 message loop", (int)ConsoleExitProgramFlag);
	while (GetMessage(&msg, NULL, 0, 0))
	{
		if (!TranslateAccelerator(msg.hwnd, hAccelTable, &msg))
		{
			TranslateMessage(&msg);
			DispatchMessage(&msg);  // Not sure where this 
		}
	}
	
	log_message("Exiting main program");
	Sleep(20);
	
	ConsoleExitProgramFlag = true;
	

#endif
#endif
	// With windows GUI, the program will not get to this point until it is exiting
	while (!ConsoleExitProgramFlag) {
		std::this_thread::sleep_for(std::chrono::milliseconds(50));
		// This thread could be doing something else.  Blinking a status light, monitoring other processes, etc.
	}
	log_message("Stop Radar");
	stop_radar();
	log_message("Stop Display");
#ifndef _RTP_Headless
	StopRadarDisp();
#endif

	log_message("Exiting main program");
				

#ifdef _FLTKGUI
	log_message("Checking on FLTK GUI exit");
	if (fltkthread.joinable()) {
		StopFLTKGui(); // Tell it to exit
		log_message("Joining");
		fltkthread.join();
		log_message("Joined");
	}
#endif
	
	log_message("Stop Console");
	//std::this_thread::sleep_for(std::chrono::milliseconds(100));

	StopConsoleMonitor();
	if( consolethread.joinable())
		consolethread.join();
	log_message("Radar RTP terminated normally.");
	close_log_file();
	closeDebugDataFile();

	return 0 ;  // would be (int) msg.wparam if only WIn32

}
